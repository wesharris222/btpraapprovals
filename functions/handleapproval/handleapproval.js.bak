const fetch = require('node-fetch');

async function getBeyondTrustToken(context) {
    // Keep existing token function exactly as is
}

module.exports = async function (context, req) {
    try {
        context.log('handleapproval function processed a request.');

        const decisionInput = req.query.decision || 'Pending';
        const decision = decisionInput.toLowerCase() === 'approved' ? 'Approved' : 'Denied';
        const requestId = req.query.requestId;
        const ticketId = req.query.ticketId;
        const username = req.query.username || 'Unknown User';
        
        if (!requestId || !ticketId) {
            context.res = {
                status: 400,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: {
                    error: `Missing required parameters: ${!requestId ? 'requestId' : 'ticketId'}`
                }
            };
            return;
        }

        const accessToken = await getBeyondTrustToken(context);
        const currentTime = new Date().toISOString().replace('T', ' ').replace(/\.\d+Z$/, '');

        const numericTicket = ticketId.replace(/^[A-Za-z]+0*/, '');
        const ticketUrl = `https://demo2.pm.beyondtrustcloud.com/jit-access-management/details/${numericTicket}`;

        const payload = {
            status: decision === 'Approved' ? '2000' : '2001',
            decision: decision,
            decisionPerformedByUser: username,
            duration: "Once",
            itsmRequestId: requestId,
            decisionTime: currentTime,
            message: "handled in teams",
            systemId: requestId,
            ticketId: ticketId,
            ticketUrl: ticketUrl
        };

        const approvalUrl = `${process.env.BEYONDTRUST_BASE_URL}/management-api/v2/AuthorizationRequest/notification/`;
        
        context.log(`Full API Call Details:`);
        context.log(`POST ${approvalUrl}`);
        context.log(`Headers: { "Content-Type": "application/json", "Authorization": "Bearer ${accessToken}", "x-correlation-id": "${requestId}" }`);
        context.log(`Body: ${JSON.stringify(payload)}`);

        const apiResponse = await fetch(approvalUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${accessToken}`,
                'x-correlation-id': requestId
            },
            body: JSON.stringify(payload)
        });

        if (!apiResponse.ok) {
            const errorText = await apiResponse.text();
            throw new Error(`API responded with status: ${apiResponse.status}, body: ${errorText}`);
        }

        // Return just the payload directly, matching the expected format
        context.res = {
            status: 200,
            headers: {
                'Content-Type': 'application/json'
            },
            body: payload  // Return the payload directly without wrapping it
        };
    } catch (error) {
        context.log.error('Error processing approval request:', error);
        context.res = {
            status: 500,
            headers: {
                'Content-Type': 'application/json'
            },
            body: {
                error: error.message
            }
        };
    }
};
